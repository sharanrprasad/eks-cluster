# Role gives access to a new user only for deployment. These are Kubernets permissions and not AWS permissions
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: deployment-role
  namespace: nginx-demo
rules:
  - verbs:
      - create
      - delete
      - deletecollection
      - update
      - watch
      - patch
    apiGroups:
      - extensions
      - apps
      - ""
    resources:
      - pods
      - deployment
      - replicasets
---

# Attach the above role to a service account using RoleBinding. If attached to a service account then it can be used in Deployment file.
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
subjects:
  - kind: ServiceAccount
    name: pod-reader-sa
    namespace: development
roleRef:
  kind: Role
  name: deployment-role
  apiGroup: rbac.authorization.k8s.io


---

# To attach this Role to a user we don't need the
#  above service account attachment instead we attach the role to ConfigMap/aws-auth

# Here we attach the role to a K8s username and not an AWS IAM username. This mapping happens in ConfigMap/aws-auth

apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
roleRef:
  kind: Role
  name: deployment-role
  apiGroup: rbac.authorization.k8s.io
subjects:
  - kind: User
    name: kubernetes-user-name
    apiGroup: rbac.authorization.k8s.io


---
# AWS ConfigMap/aws-auth. THis is deprecated now but using it for learning purpose only.

apiVersion: v1
kind: ConfigMap
metadata:
  name: aws-auth
  namespace: kube-system
data:
  mapUsers: |
    - userarn: arn:aws:iam::<ACCOUNT_ID>:user/<IAM_USER_NAME>
      username: kubernetes-user-name
      groups:
        - deployment-role # This is the role defined above.